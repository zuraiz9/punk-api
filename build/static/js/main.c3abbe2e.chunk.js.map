{"version":3,"sources":["App.module.scss","Components/SearchBar/SearchBar.module.scss","Components/CardContainer/CardContainer.module.scss","Components/BeerCard/BeerCard.module.scss","Components/SearchBar/index.js","Components/SearchBar/SearchBar.jsx","Components/BeerCard/index.js","Components/BeerCard/BeerCard.jsx","Components/CardContainer/index.js","Components/CardContainer/CardContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["module","exports","SearchBar","props","onChange","className","styles","searchbar","type","placeholder","e","beerName","target","value","BeerCard","name","info","img","card","src","alt","CardContainer","cardAsJSX","data","map","beer","key","id","description","image_url","App","useState","beers","setBeers","handleSearch","undefined","fetch","then","response","json","useEffect","body","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"4FACAA,EAAOC,QAAU,CAAC,KAAO,kBAAkB,MAAQ,qB,kBCAnDD,EAAOC,QAAU,CAAC,UAAY,+B,gBCA9BD,EAAOC,QAAU,CAAC,cAAgB,uC,gBCAlCD,EAAOC,QAAU,CAAC,KAAO,yB,+KCCVC,ECCG,SAACC,GACjB,IAAQC,EAAaD,EAAbC,SAER,OACE,yBAAKC,UAAWC,IAAOC,WACrB,2BACEC,KAAK,OACLC,YAAY,SACZL,SAAU,SAACM,GACT,IAAMC,EAAWD,EAAEE,OAAOC,MAC1BT,EAASO,Q,gCCXJG,ECCE,SAACX,GAChB,IAAQY,EAAoBZ,EAApBY,KAAMC,EAAcb,EAAda,KAAMC,EAAQd,EAARc,IACpB,OACE,yBAAKZ,UAAWC,IAAOY,MACrB,yBAAKC,IAAKF,EAAKG,IAAI,SACnB,4BAAKL,GACL,+BAAKC,KCPIK,ECEO,SAAClB,GACrB,IACMmB,EADWnB,EAAToB,KACeC,KAAI,SAACC,GAG1B,OACE,kBAAC,EAAD,CACEC,IAAKD,EAAKE,GACVZ,KAAMU,EAAKV,KACXC,KAAMS,EAAKG,YACXX,IAAKQ,EAAKI,eAIhB,OACE,oCACE,yBAAKxB,UAAWC,IAAOe,eAAgBC,KCkB9BQ,EAjCH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAKMC,EAAe,SAACvB,QACJwB,GAAZxB,GAAqC,IAAZA,EAC3ByB,MAAM,oCACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACd,GAAD,OAAUU,EAASV,MAE3Ba,MAAM,8CAAgDzB,GACnD0B,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACd,GAAD,OAAUU,EAASV,OAU/B,OAJAiB,qBAAU,WACRN,EAAa,MACZ,IAGD,yBAAK7B,UAAWC,IAAOmC,MACrB,wBAAIpC,UAAWC,IAAOoC,OAAtB,uBACA,kBAAC,EAAD,CAAWtC,SAAU8B,IACrB,kBAAC,EAAD,CAAeX,KAAMS,MCrBPW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c3abbe2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"body\":\"App_body__2a4FT\",\"title\":\"App_title__2oBiX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchbar\":\"SearchBar_searchbar__izU33\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CardContainer\":\"CardContainer_CardContainer__3ewVN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"BeerCard_card__18loL\"};","import SearchBar from \"./SearchBar\";\n\nexport default SearchBar;\n","import React from \"react\";\nimport styles from \"./SearchBar.module.scss\";\n\nconst SearchBar = (props) => {\n  const { onChange } = props;\n\n  return (\n    <div className={styles.searchbar}>\n      <input\n        type=\"text\"\n        placeholder=\"Search\"\n        onChange={(e) => {\n          const beerName = e.target.value;\n          onChange(beerName);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import BeerCard from \"./BeerCard\"\n\nexport default BeerCard","import React from \"react\";\nimport styles from \"./BeerCard.module.scss\";\n\nconst BeerCard = (props) => {\n  const { name, info, img } = props;\n  return (\n    <div className={styles.card}>\n      <img src={img} alt=\"beer\" />\n      <h2>{name}</h2>\n      <p> {info}</p>\n    </div>\n  );\n};\n\nexport default BeerCard;\n","import CardContainer from \"./CardContainer\";\n\nexport default CardContainer;\n","import React from \"react\";\nimport styles from \"./CardContainer.module.scss\";\nimport BeerCard from \"../BeerCard\";\n\nconst CardContainer = (props) => {\n  const { data } = props;\n  const cardAsJSX = data.map((beer) => {\n\n\n    return (\n      <BeerCard\n        key={beer.id}\n        name={beer.name}\n        info={beer.description}\n        img={beer.image_url}\n      />\n    );\n  });\n  return (\n    <>\n      <div className={styles.CardContainer}>{cardAsJSX}</div>\n    </>\n  );\n};\n\nexport default CardContainer;\n","import styles from \"./App.module.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport SearchBar from \"./Components/SearchBar\";\nimport CardContainer from \"./Components/CardContainer\";\n\nconst App = () => {\n  const [beers, setBeers] = useState([]);\n\n\n  \n\n  const handleSearch = (beerName) => {\n    if (beerName == undefined || beerName == \"\") {\n      fetch(\"https://api.punkapi.com/v2/beers\")\n        .then((response) => response.json())\n        .then((data) => setBeers(data)); \n    } else\n      fetch(\"https://api.punkapi.com/v2/beers?beer_name=\" + beerName)\n        .then((response) => response.json())\n        .then((data) => setBeers(data));\n  };\n\n\n\n\n  useEffect(() => {\n    handleSearch(\"\");\n  }, []);\n\n  return (\n    <div className={styles.body}>\n      <h2 className={styles.title}>The Big Bad Brewery</h2>\n      <SearchBar onChange={handleSearch} />\n      <CardContainer data={beers} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}